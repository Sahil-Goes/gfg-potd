class Solution {
  public:
    Node* sortedMerge(Node* head1, Node* head2) {
       //If either list is empty 
       if(head1 == NULL)
        return head2;
       if(head2 == NULL)
        return head1;
       
        Node *temp, *newHead;
        //To find head of the new linked list
        if(head1->data < head2->data){
           temp = head1;
           head1=head1->next;
        }
        else{
           temp=head2;
           head2=head2->next;
        }
        newHead=temp;

        //To traverse to list and reach one end(Null value)
        while(head1!=NULL && head2!=NULL){
            if(head1->data < head2->data)
            {
               temp->next=head1;
               head1=head1->next;
            }
           
            else
            {
               temp->next = head2;
               head2= head2->next;
            }
           
           temp = temp->next;
        }

        //Assign next to other list
        //(as it is sorted so no more checking for < condition or how many terms are left)
        if(head1==NULL)
            temp->next = head2;
        else
            temp->next = head1;
       return newHead;
    }
};
