//Brute Force Approach
//Solution Conditions: 
// 1) Left and Right buildings should be greater than current building to hold water
// 2) Then we find which left or right is minimum and minus current building height

class Solution {
  public:
    int maxWater(vector<int> &arr) {
        int lmax=0, rmax=0, n=arr.size(), totalWater=0;
        vector <int> right(n);
        vector <int> left(n);
        
        //Getting Left & right arrays with max heights of left and right buildings
        for (int i=0; i<n; i++){
            lmax = max(lmax, arr[i]);
            left[i]= lmax;
        }
        
        for (int i=n-1; i>=0; i--){
            rmax = max(rmax, arr[i]);
            right[i] = rmax;
        }
        
        //calculating water trapped
        for(int i=0; i<n; i++){
            if(left[i] > arr[i] && right[i] > arr[i]){
                
                /*if(left[i]<right[i]){
                    totalWater += left[i] - arr[i];
                }
                else{
                    totalWater += right[i] - arr[i];
                }*/
                
                totalWater += min(left[i],right[i]) - arr[i];
            }
        }
        return totalWater;
    }
};
